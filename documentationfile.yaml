openapi: 3.0.0
info:
  title: citi food delivery
  version: "1.0.0"
  description: |
    API documentation for managing citi food derivery.
  contact:
    name: Imanariyo Baptiste
    email: "imanariyo@gmail.com"
    url: "tel:0787795163"
servers:
  - url: http://localhost:2222
  - url: https://citi-food-delivery-backend-api.onrender.com
    description: Local development server
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Restourant:
      type: object
      properties:
        name:
          type: string
        location:
          type: object
          properties:
            latitude:
              type: number
            longitude:
              type: number
        address:
          type: string
        images:
          type: array
          items:
            type: string
        contactPerson:
          type: string
        email:
          type: string
    WeeklyMenu:
      type: object
      properties:
        day:
          type: string
          enum:
            - Monday
            - Tuesday
            - Wednesday
            - Thursday
            - Friday
            - Saturday
            - Sunday
          example: Monday
        dayCategoryNames:
          type: array
          items:
            type: string
          example: ["Breakfast", "Lunch", "Dinner"]
        dayCategories:
          type: array
          items:
            type: string
            format: uuid
          example: ["60c72b2f4f1a2c001c8e4b19", "60c72b2f4f1a2c001c8e4b1a"]
      required:
        - day
    DayCategory:
      type: object
      properties:
        name:
          type: string
          example: Breakfast
        foodItems:
          type: array
          items:
            type: string
            format: uuid
          example: ["60c72b2f4f1a2c001c8e4b1b", "60c72b2f4f1a2c001c8e4b1c"]
        day:
          type: string
          enum:
            - Monday
            - Tuesday
            - Wednesday
            - Thursday
            - Friday
            - Saturday
            - Sunday
          example: Monday
      required:
        - name
        - day
    
    
    
    
    Subscriber:
      type: object
      properties:
        numberOfPeople:
          type: integer
          description: The number of people subscription
        required:
        - numberOfPeople  
    Subscription:
      type: object
      properties:
        type:
          type: string
          enum: ['weekly', 'monthly']
        amount:
          type: number
        dayCategory:
          type: string
        latitude:
          type: number
          description: Latitude of the Restourant location
        longitude:
          type: number
          description: Longitude of the Restourant location  
    AddToCartRequest:
      type: object
      properties:
        quantity:
          type: integer
          description: Quantity of the item
    UpdateCartRequest:
      type: object
      properties:
        itemId:
          type: string
          description: ID of the item to update in the cart
        quantity:
          type: integer
          description: New quantity of the item
    RemoveFromCartRequest:
      type: object
      properties:
        itemId:
          type: string
          description: ID of the item to remove from the cart
    CheckoutRequest:
      type: object
      properties:
        userId:
          type: string
          description: ID of the user
    Cart:
      type: object
      properties:
        userId:
          type: string
        foodItems:
          type: array
          items:
            type: object
            properties:
              foodItem:
                type: string
              quantity:
                type: integer
    Order:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        email:
          type: string
        items:
          type: array
          items:
            type: object
            properties:
              foodItem:
                type: string
              quantity:
                type: integer
        totalPrice:
          type: number
        status:
          type: string
          default: pending
        customerPhone:
          type: string
        driverphone:
          type: string
        paymentId:
          type: string  
    Payment:
      type: object
      properties:
        phonenumber:
          type: string
          description: Phone number of the customer
        amount:
          type: number
          description: Amount of the payment
        currency:
          type: string
          description: Currency of the payment
        paymentMethod:
          type: string
          description: Payment method used (e.g., credit card, PayPal)
        groupPayments:
                type: array
                description: An array of group payment details
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      description: The name of the individual
                    phoneNumber:
                      type: string
                      description: The phone number of the individual
                    amount:
                      type: number
                      description: The amount paid by the individual  
               
    Review:
      type: object
      properties:
        _id:
          type: string
          description: Unique identifier for the review
        userId:
          type: string
          description: ID of the user who submitted the review
        foodItem:
          type: string
          description: ID of the associated food item
        rating:
          type: number
          description: Rating given in the review
        comment:
          type: string
          description: Comment provided in the review
        createdAt:
          type: string
          format: date-time
          description: Date and time when the review was created
        updatedAt:
          type: string
          format: date-time
          description: Date and time when the review was last updated  
    FoodItem:
      type: object
      properties:
        _id:
          type: string
          example: "60fe5b6d2fba530015d48414"
        name:
          type: string
          example: "Pizza"
        images:
          type: array
          items:
            type: string
            format: binary
          example: "http://example.com/image.jpg"
        category:
          type: array
          items:
            type: string
            example: "60fe5b6d2fba530015d48413"
        price:
          type: number
          example: 9.99
        description:
          type: string
          example: "Delicious pizza with fresh ingredients"
        availableDays:
          type: array
          items:
            type: string
            example: "Monday"
        time:
          type: string
          example: "18:00-22:00"
        createdAt:
          type: string
          format: date-time
          example: "2023-07-26T14:29:09.282Z"
        updatedAt:
          type: string
          format: date-time
          example: "2023-07-26T14:29:09.282Z"
    Category:
      type: object
      properties:
        _id:
          type: string
          example: 60fe5b6d2fba530015d48413
        name:
          type: string
          example: "Beverages"
        images:
          type: array
          items:
            type: string
            format: binary
          example: "http://example.com/image.jpg"
        createdAt:
          type: string
          format: date-time
          example: "2023-07-26T14:29:09.282Z"
        updatedAt:
          type: string
          format: date-time
          example: "2023-07-26T14:29:09.282Z"
    Notification:
      type: object
      properties:
        _id:
          type: string
          description: Unique identifier for the notification
        orderId:
          type: string
          description: ID of the associated order
        userId:
          type: string
          description: ID of the user receiving the notification
        status:
          type: string
          description: Status of the notification (e.g., 'unread', 'read')
        createdAt:
          type: string
          format: date-time
          description: Date and time when the notification was created
        updatedAt:
          type: string
          format: date-time
          description: Date and time when the notification was last updated
    User:
      type: object
      properties:
        userId:
          type: string
          example: "60d0fe4f5311236168a109ca"
        fullNames:
          type: string
          example: "John Doe"
        email:
          type: string
          example: "john.doe@example.com"
        image:
          type: string
          format: binary
          example: "url_to_profile_picture"
        gender:
          type: string
          example: "Male"
        location:
          type: string
          example: "City, Country"
        phoneNumber:
          type: string
          example: "1234567890"
        delivelinglocation:
          type: string
          example: "New Delivery Location"

paths:
  /citi_api/v1/auth/deleteUserById/{id}:
    delete:
      summary: "Delete a user by ID"
      tags:
        - 'authentication'
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID of the user to be deleted
      responses:
        '200':
          description: "User deleted successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: "Success message"
                    example: "User deleted successfully"
        '404':
          description: "User not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: "Error message"
                    example: "User not found"
        '500':
          description: "Internal Server Error"         
  /citi_api/v1/auth/signup:
    post:
      summary: User Signup
      tags: [authentication]
      operationId: signup
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - fullNames
                - email
                - password
                - phoneNumber
                - sex
                - location
                - role
              properties:
                fullNames:
                  type: string
                  example: "John Doe"
                sex:
                  type: string
                  example: "Male"  
                email:
                  type: string
                  example: "imanariyobaptiste@gmail.com"
                password:
                  type: string
                  example: "123"
                phoneNumber:
                  type: number
                  example: 1234567890
                location:
                  type: string
                  example: "City, Country"
                role:
                  type: string
                  example: "user"
      responses:
        '200':
          description: User registered successfully
        '500':
          description: Internal Server Error
  /citi_api/v1/auth/login:
    post:
      summary: User Login
      tags: [authentication]
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  example: "imanariyobaptiste@gmail.com"
                password:
                  type: string
                  example: "123"
      responses:
        '200':
          description: User logged in successfully
        '401':
          description: Unauthorized - Invalid credentials
        '500':
          description: Internal Server Error
  /citi_api/v1/auth/forget:
    post:
      summary: Generate and Send OTP for Password Reset
      tags: [authentication]
      operationId: generateAndSendOTP
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  example: "imanariyobaptiste@gmail.com"
      responses:
        '200':
          description: OTP generated and sent successfully
        '404':
          description: User not found
        '500':
          description: Internal Server Error
  /citi_api/v1/auth/reset:
    post:
      summary: Verify OTP and Update Password
      tags: [authentication]
      operationId: verifyOTPAndUpdatePassword
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - otp
                - newpassword
              properties:
                email:
                  type: string
                  example: "imanariyobaptiste@gmail.com"
                otp:
                  type: string
                  example: "4225261"
                newpassword:
                  type: string
                  example: "123"
      responses:
        '200':
          description: Password updated successfully
        '404':
          description: User not found
        '401':
          description: Unauthorized - Invalid OTP
        '500':
          description: Internal Server Error
  /citi_api/v1/auth/change:
    post:
      summary: Change Password (Authenticated Route)
      tags: [authentication]
      security:
        - bearerAuth: []
      operationId: changepassword
      parameters:
        - name: Authorization
          in: header
          description: JWT token obtained after user login
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - currentpassword
                - newpassword
              properties:
                currentpassword:
                  type: string
                  example: "123"
                newpassword:
                  type: string
                  example: "123"
      responses:
        '200':
          description: Password changed successfully
        '401':
          description: Unauthorized - Invalid token
        '500':
          description: Internal Server Error
  /citi_api/v1/auth/getAllUsers:
    get:
      summary: 'Get all users'
      tags:
        - 'authentication'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 'Users retrieved successfully'
          content:
            application/json:
              schema:
                type: object
  /citi_api/v1/auth/maketheadminasuser/{id}:
    patch:
      summary: Revoke admin role from a user
      tags: [authentication]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID of the user to be reverted to user role
      responses:
        '200':
          description: User updated successfully and is user by role now
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User updated successfully and is user by role now
                  # data:
                  #   $ref: '#/components/schemas/User'
        '404':
          description: User not found
        '500':
          description: Internal Server Error
  /citi_api/v1/auth/updateDeliveryLocation:
    patch:
      summary: Update the delivery location of a user
      tags: [authentication]
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - delivelinglocation
              properties:
                delivelinglocation:
                  type: string
                  example: "New Delivery Location"
      responses:
        '200':
          description: Delivery location updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Delivery location updated successfully
                  data:
                    $ref: '#/components/schemas/User'
        '404':
          description: User not found
        '400':
          description: Delivery location is required
        '500':
          description: Internal Server Error
  /citi_api/v1/auth/addadminbyid/{id}:
    patch:
      summary: Grant admin role to a user
      tags: [authentication]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID of the user to be granted admin role
      responses:
        '200':
          description: User updated successfully and is admin now
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User updated successfully and is admin now
                  data:
                    $ref: '#/components/schemas/User'
        '404':
          description: User not found
        '500':
          description: Internal Server Error
  /citi_api/v1/auth/updateUserById/{id}:
    patch:
      summary: Update a user by ID
      tags: [authentication]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID of the user to be updated
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                fullNames:
                  type: string
                  example: "John Doe"
                email:
                  type: string
                  example: "john.doe@example.com"
                image:
                  type: string
                  format: binary
                  example: "url_to_profile_picture"
                gender:
                  type: string
                  example: "Male"
                location:
                  type: string
                  example: "City, Country"
                phoneNumber:
                  type: string
                  example: "1234567890"
                delivelinglocation:
                  type: string
                  example: "New Delivery Location"
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User updated successfully
                  data:
                    $ref: '#/components/schemas/User'
        '404':
          description: User not found
        '500':
          description: Internal Server Error
 
  /citi_api/v1/weeklymenu/createDayForWeek:
    post:
      summary: Create a new weekly menu
      tags: [Weekly Menu]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WeeklyMenu'
      responses:
        '200':
          description: Successfully created
        '400':
          description: Bad request
  /citi_api/v1/weeklymenu/get:
    get:
      tags:
        - "Weekly Menu"
      summary: "Get all weekly menu items"
      responses:
        200:
          description: "Successfully retrieved all weekly menu items"
  /citi_api/v1/weeklymenu/get/{id}:
    get:
      tags:
        - "Weekly Menu"
      summary: "Get a weekly menu item by ID"
      parameters:
        - in: "path"
          name: "id"
          required: true
          type: "string"
          description: "ID of the weekly menu item to retrieve"
      responses:
        200:
          description: "Successfully retrieved the weekly menu item"
        404:
          description: "Weekly menu item not found"
  /citi_api/v1/weeklymenu/edit/{id}:
    put:
      tags:
        - "Weekly Menu"
      summary: "Update a weekly menu item by ID"
      parameters:
        - in: "path"
          name: "id"
          required: true
          schema:
            type: "string"
          description: "ID of the weekly menu item to update"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                day:
                  type: "string"
                  description: "Day of the week (e.g., Sunday, Monday, Tuesday)"
                  example: "Monday"
                foodItems:
                  type: "array"
                  items:
                    type: "string"
                  description: "List of food item IDs"
                  example: ["123", "456", "789"]
      responses:
        200:
          description: "Successfully updated the weekly menu item"
        400:
          description: "Bad request. Please check the request parameters."
        404:
          description: "Weekly menu item not found"
  /citi_api/v1/weeklymenu/delete/{id}:
    delete:
      tags:
        - "Weekly Menu"
      summary: "Delete a weekly menu item by ID"
      parameters:
        - in: "path"
          name: "id"
          required: true
          type: "string"
          description: "ID of the weekly menu item to delete"
      responses:
        200:
          description: "Successfully deleted the weekly menu item"
        404:
          description: "Weekly menu item not found"
  
  
  /citi_api/v1/cart/getall:
    get:
      summary: Get all items in the cart
      tags:
        - Cart
      security:
       - bearerAuth: []
      responses:
        '200':
          description: Cart retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
  /citi_api/v1/cart/add-to-cart/{foodItemId}:
    post:
      summary: Add an item to the cart
      tags:
        - Cart
      security:
       - bearerAuth: []  
      parameters:
        - in: path
          name: foodItemId
          schema:
            type: string
          required: true
          description: ID of the food item to add to the cart
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddToCartRequest'
      responses:
        '200':
          description: Item added to the cart successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
  /citi_api/v1/cart/update-cart/{foodItemId}:
    put:
      summary: Update the quantity of an item in the cart
      tags:
        - Cart
      security:
         - bearerAuth: []
      parameters:
        - in: path
          name: foodItemId
          schema:
            type: string
          required: true
          description: ID of the food item to update in the cart
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCartRequest'
      responses:
        '200':
          description: Cart updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
  /citi_api/v1/cart/remove-from-cart/{foodItemId}:
    delete:
      summary: Remove an item from the cart
      tags:
        - Cart
      security:
       - bearerAuth: []  
      parameters:
        - in: path
          name: foodItemId
          schema:
            type: string
          required: true
          description: ID of the food item to remove from the cart
      
      responses:
        '200':
          description: Item removed from the cart successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
  /citi_api/v1/cart/checkout:
    post:
      summary: Checkout and create an order
      tags:
        - Cart
      security:
       - bearerAuth: []  
    
      responses:
        '200':
          description: Order placed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
  /citi_api/v1/order/create-order:
    post:
      summary: Create a new order
      tags:
        - Order
      security:
        - bearerAuth: []
      description: Endpoint to create a new order.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Order created successfully
                  data:
                    $ref: '#/components/schemas/Order'
  /citi_api/v1/order/get-order:
    get:
      summary: Get all orders
      tags:
        - Order
      security:
        - bearerAuth: []
      description: Endpoint to retrieve all orders.
      responses:
        '200':
          description: Successfully retrieved all orders
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: All orders retrieved successfully
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
  /citi_api/v1/order/get-order-by-id/{id}:
    get:
      summary: Get an order by ID
      tags:
        - Order
      security:
        - bearerAuth: []
      description: Endpoint to retrieve an order by ID.
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the order to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved order by ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Order retrieved successfully
                  data:
                    $ref: '#/components/schemas/Order'
  /citi_api/v1/order/edit-order-by-id/{id}:
    put:
      summary: Update an order by ID
      tags:
        - Order
      security:
        - bearerAuth: []
      description: Endpoint to update an order by ID.
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the order to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: Order updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Order updated successfully
                  data:
                    $ref: '#/components/schemas/Order'
  /citi_api/v1/order/delete-order-by-id/{id}:
    delete:
      summary: Delete an order by ID
      tags:
        - Order
      security:
        - bearerAuth: []
      description: Endpoint to delete an order by ID.
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the order to delete
          schema:
            type: string
      responses:
        '200':
          description: Order deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Order deleted successfully
                  data:
                    type: null 
  /citi_api/v1/order/deliver/order-id/{id}:
    patch:
      summary: Update the delivery status of an order
      description: Update the delivery status of an order by specifying the driver information.
      tags:
        - Order
      security:
        - bearerAuth: []  
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the order to deliver
          schema:
            type: string
      requestBody:
        description: Driver information
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                driverName:
                  type: string
                driverPhone:
                  type: string
              required:
                - driverName
                - driverPhone
      responses:
        200:
          description: Order delivery status updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Order delivery status updated successfully
                  data:
                    type: object
                    properties:
                      _id:
                        type: string
                      userId:
                        type: string
                      driverName:
                        type: string
                      driverPhone:
                        type: string
                      status:
                        type: string
                        example: delivering
                      createdAt:
                        type: string
                      updatedAt:
                        type: string
        400:
          description: Bad request, missing required parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Order ID, driver name, and driver phone are required
        404:
          description: Order not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Order not found
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: An internal server error occurred
  /citi_api/v1/category/create:
      post:
       summary: Create a new category
       tags: 
         - Category
       security:
         - bearerAuth: []
       requestBody:
         required: true
         content:
           multipart/form-data:
             schema:
               type: object
               properties:
                 name:
                   type: string
                   example: "Beverages"
                 images:
                   type: array
                   items:
                     type: string
                     format: binary
                   example: ["image1.jpg", "image2.jpg"]
                  
       responses:
         '201':
           description: Category created successfully
           content:
             application/json:
               schema:
                 $ref: '#/components/schemas/Category'
         '500':
           description: Internal Server Error
  
  /citi_api/v1/category/get:
     get:
       summary: Get all categories
       tags:
         - Category
       security:
        - bearerAuth: []  
       responses:
         '200':
           description: All categories retrieved successfully
           content:
             application/json:
               schema:
                 type: array
                 items:
                   $ref: '#/components/schemas/Category'
         '500':
           description: Internal Server Error
  /citi_api/v1/category/get/{id}:
     get:
       summary: Get a category by ID
       tags:
         - Category
       security:
        - bearerAuth: []  
       parameters:
         - name: id
           in: path
           required: true
           schema:
             type: string
           description: ID of the category to retrieve
       responses:
         '200':
           description: Successfully retrieved category
           content:
             application/json:
               schema:
                 $ref: '#/components/schemas/Category'
         '404':
           description: Category not found
           content:
             application/json:
               schema:
                 type: object
                 properties:
                   message:
                     type: string
                     example: Category not found
         '500':
           description: Internal Server Error
  /citi_api/v1/category/edit/{id}:
     put:
       summary: Update a category by ID
       tags:
         - Category
       security:
        - bearerAuth: []  
       parameters:
         - name: id
           in: path
           required: true
           schema:
             type: string
           description: ID of the category to update
       requestBody:
         required: true
         content:
           multipart/form-data:
             schema:
               type: object
               properties:
                 name:
                   type: string
                   example: "Beverages"
                 images:
                   type: array
                   items:
                     type: string
                     format: binary
                   example: ["image1.jpg", "image2.jpg"]
                   format: binary
       responses:
         '200':
           description: Category updated successfully
           content:
             application/json:
               schema:
                 $ref: '#/components/schemas/Category'
         '404':
           description: Category not found
           content:
             application/json:
               schema:
                 type: object
                 properties:
                   message:
                     type: string
                     example: Category not found
         '500':
           description: Internal Server Error
  /citi_api/v1/category/delete/{id}:
     delete:
       summary: Delete a category by ID
       tags:
         - Category
       security:
        - bearerAuth: []  
       parameters:
         - name: id
           in: path
           required: true
           schema:
             type: string
           description: ID of the category to delete
       responses:
         '200':
           description: Category deleted successfully
           content:
             application/json:
               schema:
                 type: object
                 properties:
                   status:
                     type: string
                     example: success
                   message:
                     type: string
                     example: Category deleted successfully
         '404':
           description: Category not found
           content:
             application/json:
               schema:
                 type: object
                 properties:
                   message:
                     type: string
                     example: Category not found
         '500':
           description: Internal Server Error  
  /citi_api/v1/category/search:
    get:
      summary: Search for categories
      tags: [Category]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: keyword
          required: true
          schema:
            type: string
            example: "Italian"
          description: Keyword to search for in categories
      responses:
        '200':
          description: Successfully retrieved search results
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        '500':
          description: Internal Server Error


  /citi_api/v1/fooditem/create:
    post:
      summary: Create a new food item
      tags: [fooditem]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Pizza"
                images:
                  type: array
                  items:
                    type: string
                    format: binary
                category:
                  type: array
                  items:
                    type: string
                price:
                  type: number
                  example: 9.99
                description:
                  type: string
                  example: "Delicious pizza with fresh ingredients"
                availableDays:
                  type: array
                  items:
                    type: string
                  example: ["Monday", "Wednesday"]
                time:
                  type: string
                  example: "18:00-22:00"
      responses:
        '201':
          description: Food item created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FoodItem'
        '500':
          description: Internal Server Error
  /citi_api/v1/fooditem/get:
    get:
      summary: Get all food items
      tags: [fooditem]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully retrieved all food items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FoodItem'
  /citi_api/v1/fooditem/all-food-item-forcategoryid/{categoryId}:
     get:
       summary: Retrieve all food items by category ID
       tags: 
         - fooditem
       security:
         - bearerAuth: []
       parameters:
         - in: path
           name: categoryId
           required: true
           schema:
             type: string
           description: ID of the category to filter food items
       responses:
         '200':
           description: Successfully retrieved all food items by category
           content:
             application/json:
               schema:
                 type: array
                 items:
                   $ref: '#/components/schemas/FoodItem'
  /citi_api/v1/fooditem/get/{id}:
    get:
      summary: Get a food item by ID
      tags: [fooditem]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: "60fe5b6d2fba530015d48414"
      responses:
        '200':
          description: Successfully retrieved food item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FoodItem'
        '404':
          description: Food item not found
  /citi_api/v1/fooditem/edit/{id}:
    put:
      summary: Update a food item by ID
      tags: [fooditem]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: "60fe5b6d2fba530015d48414"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Pizza"
                images:
                  type: array
                  items:
                    type: string
                    format: binary
                 
                category:
                  type: array
                  items:
                    type: string
                price:
                  type: number
                  example: 9.99
                description:
                  type: string
                  example: "Delicious pizza with fresh ingredients"
                availableDays:
                  type: array
                  items:
                    type: string
                  example: ["Monday", "Wednesday"]
                time:
                  type: string
                  example: "18:00-22:00"
      responses:
        '200':
          description: Food item updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FoodItem'
        '404':
          description: Food item not found
        '500':
          description: Internal Server Error
  /citi_api/v1/fooditem/delete/{id}:
    delete:
      summary: Delete a food item by ID
      tags: [fooditem]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: "60fe5b6d2fba530015d48414"
      responses:
        '200':
          description: Food item deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Food item deleted successfully"
        '404':
          description: Food item not found
        '500':
          description: Internal Server Error
  /citi_api/v1/fooditem/search:
    get:
      summary: Search for food items
      tags: [fooditem]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: keyword
          required: true
          schema:
            type: string
            example: "Pizza"
          description: Keyword to search for in food items
      responses:
        '200':
          description: Successfully retrieved search results
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FoodItem'
        '500':
          description: Internal Server Error
  /citi_api/v1/favorite/create:
    post:
      summary: Create a new favorite
      tags:
        - favorite
      security:
        - bearerAuth: []
      description: Create a new favorite entry for a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  description: The ID of the user
                foodItem:
                  type: string
                  description: The ID of the food item
              required:
                - userId
                - foodItem
      responses:
        '200':
          description: Successfully created favorite
        '400':
          description: Invalid request body
  /citi_api/v1/favorite/get/:
    get:
      summary: Get all favorites
      tags:
        - favorite
      security:
        - bearerAuth: []  
      description: Retrieve all favorite entries for a user

      responses:
        '200':
          description: Successfully retrieved favorites
  /citi_api/v1/favorite/get/{id}:
    get:
      summary: Get favorite by ID
      tags:
        - favorite
      security:
        - bearerAuth: []  
      description: Retrieve a favorite entry by its ID
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the favorite entry
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved favorite
        '404':
          description: Favorite not found
  /citi_api/v1/favorite/edit/{id}:
    put:
      summary: Update favorite by ID
      tags:
        - favorite
      security:
        - bearerAuth: []  
      description: Update a favorite entry by its ID
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the favorite entry
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  description: The ID of the user
                foodItem:
                  type: string
                  description: The ID of the food item
              required:
                - userId
                - foodItem
      responses:
        '200':
          description: Successfully updated favorite
        '400':
          description: Invalid request body
        '404':
          description: Favorite not found
  /citi_api/v1/favorite/delete/{id}:
    delete:
      summary: Delete favorite by ID
      tags:
        - favorite
      security:
        - bearerAuth: []  
      description: Delete a favorite entry by its ID
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the favorite entry
          schema:
            type: string
      responses:
        '200':
          description: Successfully deleted favorite
        '404':
          description: Favorite not found
  /citi_api/v1/notification/create:
    post:
      summary: Create a new notification
      tags: 
        - Notification
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Notification'
      responses:
        '201':
          description: Notification created successfully
        '500':
          description: Internal Server Error
  /citi_api/v1/notification/get:
    get:
      summary: Get all notifications
      tags: 
        - Notification
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Notifications retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'
        '500':
          description: Internal Server Error
  /citi_api/v1/notification/get/{id}:
    get:
      summary: Get a notification by ID
      tags: 
        - Notification
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID of the notification to retrieve
      responses:
        '200':
          description: Notification retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
        '404':
          description: Notification not found
        '500':
          description: Internal Server Error
  /citi_api/v1/notification/edit/{id}:
    put:
      summary: Update a notification by ID
      tags: 
        - Notification
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID of the notification to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Notification'
      responses:
        '200':
          description: Notification updated successfully
        '404':
          description: Notification not found
        '500':
          description: Internal Server Error
  /citi_api/v1/notification/delete/{id}:
    delete:
      summary: Delete a notification by ID
      tags: 
        - Notification
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID of the notification to delete
      responses:
        '200':
          description: Notification deleted successfully
        '404':
          description: Notification not found
        '500':
          description: Internal Server Error 
  /citi_api/v1/payment/payfororder/{orderId}:
    post:
      summary: Make a payment for an order
      tags: 
        - Payment
      security:
        - bearerAuth: []
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
          description: ID of the order to make payment for
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Payment'
      responses:
        '201':
          description: Payment successful
        '500':
          description: Internal Server Error
  
  /citi_api/v1/payment/get/{id}:
    get:
      summary: Get a payment by ID
      tags: 
        - Payment
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID of the payment to retrieve
      responses:
        '200':
          description: Payment retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        '404':
          description: Payment not found
        '500':
          description: Internal Server Error
  /citi_api/v1/payment/get:
    get:
      summary: Get all payments
      tags: 
        - Payment
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Payments retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Payment'
        '500':
          description: Internal Server Error
  /citi_api/v1/payment/edit/{id}:
    put:
      summary: Update a payment by ID
      tags: 
        - Payment
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID of the payment to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Payment'
      responses:
        '200':
          description: Payment updated successfully
        '404':
          description: Payment not found
        '500':
          description: Internal Server Error
  /citi_api/v1/payment/delete/{id}:
    delete:
      summary: Delete a payment by ID
      tags: 
        - Payment
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID of the payment to delete
      responses:
        '200':
          description: Payment deleted successfully
        '404':
          description: Payment not found
        '500':
          description: Internal Server Error
  /citi_api/v1/review/create-review/foodItem:
    post:
      summary: Create a review for a food item
      tags: 
        - Review
      security:
        - bearerAuth: []  
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
      responses:
        '201':
          description: Review created successfully
        '500':
          description: Internal Server Error
  /citi_api/v1/review/reviews/{id}:
    get:
      summary: Get all reviews for a specific food item
      tags: 
        - Review
      security:
        - bearerAuth: []  
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID of the food item to get reviews for
      responses:
        '200':
          description: Reviews retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
        '404':
          description: Reviews not found
        '500':
          description: Internal Server Error
  /citi_api/v1/review/{id}:
    put:
      summary: Update a review by ID
      tags: 
        - Review
      security:
        - bearerAuth: []  
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID of the review to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
      responses:
        '200':
          description: Review updated successfully
        '404':
          description: Review not found
        '500':
          description: Internal Server Error

    delete:
      summary: Delete a review by ID
      tags: 
        - Review
      security:
        - bearerAuth: []  
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID of the review to delete
      responses:
        '200':
          description: Review deleted successfully
        '404':
          description: Review not found
        '500':
          description: Internal Server Error
  
  /citi_api/v1/subscription/create-subscription:
    post:
      summary: Create a new subscription
      tags: [Subscription]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subscription'
      responses:
        '201':
          description: Successfully created subscription
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
  /citi_api/v1/subscription/get-all:
    get:
      summary: Retrieve all subscriptions
      tags: [Subscription]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully retrieved subscriptions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Subscription'
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
  /citi_api/v1/subscription/getby-id/{id}:
    get:
      summary: Retrieve subscription by ID
      tags: [Subscription]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved subscription
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        '401':
          description: Unauthorized
        '404':
          description: Subscription not found
        '500':
          description: Internal Server Error
  /citi_api/v1/subscription/update/{id}:
    put:
      summary: Update subscription by ID
      tags: [Subscription]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subscription'
      responses:
        '200':
          description: Successfully updated subscription
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
        '404':
          description: Subscription not found
        '500':
          description: Internal Server Error
  /citi_api/v1/subscription/delete/{id}:
    delete:
      summary: Delete subscription by ID
      tags: [Subscription]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully deleted subscription
        '401':
          description: Unauthorized
        '404':
          description: Subscription not found
        '500':
          description: Internal Server Error

  
  /citi_api/v1/subscribe/subscribefor/{subscriptionId}:
    post:
      summary: Subscribe for a subscription
      tags: [subscribers]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: subscriptionId
          schema:
            type: string
          required: true
          description: The ID of the subscription to subscribe for
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                numberOfPeople:
                  type: integer
                  description: Number of people subscribing
                  example: 4
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
  
  
  /citi_api/v1/subscribe/get-all:
    get:
      summary: Get all subscribers
      tags:
        - 'subscribers'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
        '500':
          description: Internal Server Error

  /citi_api/v1/subscribe/getby-id/{id}:
    put:
      summary: Get subscriber by ID
      tags:
        - 'subscribers'
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The ID of the subscriber to get
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
        '500':
          description: Internal Server Error

  /citi_api/v1/subscribe/delete/{id}:
    delete:
      summary: Delete subscriber by ID
      tags:
        - 'subscribers'
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The ID of the subscriber to delete
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  
  /citi_api/v1/subscribe/pay1/{subscriptionId}:
    post:
      summary: Process payment for a subscription
      tags: [subscribers]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: subscriptionId
          schema:
            type: string
          required: true
          description: The ID of the subscription to pay for
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  description: The ID of the user making the payment
                paymentMethod:
                  type: string
                  description: The payment method used
                transactionId:
                  type: string
                  description: The transaction ID from the payment provider
                amount:
                  type: number
                  description: The amount paid
                groupPayments:
                  type: array
                  description: An array of group payment details
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                        description: The name of the individual
                      phoneNumber:
                        type: string
                        description: The phone number of the individual
                      amount:
                        type: number
                        description: The amount paid by the individual  
                  required:
                  - userId
                  - paymentMethod
                  - transactionId
                  - amount
      responses:
      '201':
        description: Payment processed successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  example: success
                message:
                  type: string
                  example: Payment processed successfully
                data:
                  type: object
                  properties:
                    payment:
                      $ref: '#/components/schemas/Payment'
                    subscriber:
                      $ref: '#/components/schemas/Subscriber'
      '400':
        description: Bad Request
      '500':
        description: Internal Server Error
  
  /citi_api/v1/subscribe/pay/{subscribId}:
    post:
      summary: Process payment for a subscription
      tags: [subscribers]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: subscribId
          schema:
            type: string
          required: true
          description: The ID of the subscription to pay for
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  description: The ID of the user making the payment
                paymentMethod:
                  type: string
                  description: The payment method used
                transactionId:
                  type: string
                  description: The transaction ID from the payment provider
                amount:
                  type: number
                  description: The amount paid
                groupPayments:
                  type: array
                  description: An array of group payment details
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                        description: The name of the individual
                      phoneNumber:
                        type: string
                        description: The phone number of the individual
                      amount:
                        type: number
                        description: The amount paid by the individual
                # required:
                #   - userId
                #   - paymentMethod
                #   - transactionId
                #   - amount
      responses:
        '201':
          description: Payment processed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Payment processed successfully
                  data:
                    type: object
                    properties:
                      payment:
                        $ref: '#/components/schemas/Payment'
                      subscriber:
                        $ref: '#/components/schemas/Subscriber'
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
  /citi_api/v1/daycategory/create-day-categories:
    post:
      summary: Create a new day category
      tags: [DayCategory]
        
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the day category
                foodItems:
                  type: array
                  items:
                    type: string
                    description: IDs of the food items associated with the category
                day:
                  type: string
                  enum: [Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday]
                  description: The day of the week for this category
              required:
                - name
                - day
      responses:
        '201':
          description: Day category created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Day category created successfully
                  dayCategory:
                    $ref: '#/components/schemas/DayCategory'
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
  /citi_api/v1/daycategory/get-all-day-categories:
    get:
      summary: Get all day categories
      tags:
        - DayCategory
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DayCategory'
        '500':
          description: Internal Server Error
  /citi_api/v1/daycategory/getday-category/{id}:
    get:
      summary: Get day category by ID
      tags:
        - DayCategory
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The ID of the day category to get
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DayCategory'
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /citi_api/v1/daycategory/update-day-category/{id}:
    put:
      summary: Update a day category by ID
      tags:
        - DayCategory
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The ID of the day category to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the day category
                foodItems:
                  type: array
                  items:
                    type: string
                    description: IDs of the food items associated with the category
                day:
                  type: string
                  enum: [Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday]
                  description: The day of the week for this category
              required:
                - name
                - day
      responses:
        '200':
          description: Day category updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Day category updated successfully
                  dayCategory:
                    $ref: '#/components/schemas/DayCategory'
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /citi_api/v1/daycategory/delete-day-category/{id}:
    delete:
      summary: Delete a day category by ID
      tags:
        - DayCategory
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The ID of the day category to delete
      responses:
        '200':
          description: Day category deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Day category deleted successfully
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /citi_api/v1/restourant/create:
    post:
      summary: Create or update the Restourant profile
      tags:
        - Restourant
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the Restourant
                latitude:
                  type: number
                  description: Latitude of the Restourant location
                longitude:
                  type: number
                  description: Longitude of the Restourant location
                address:
                  type: string
                  description: The address of the Restourant
                images:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: Array of image files
                contactPerson:
                  type: string
                  description: Contact person for the Restourant
                email:
                  type: string
                  description: Contact email for the Restourant
              required:
                - name
                - latitude
                - longitude
                - address
                - contactPerson
                - email
      responses:
        '201':
          description: Restourant profile created or updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Restourant profile created or updated successfully
                  Restourant:
                    $ref: '#/components/schemas/Restourant'
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error

  /citi_api/v1/restourant/get:
    get:
      summary: Get the Restourant profile
      tags:
        - Restourant
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restourant'
        '404':
          description: Restourant profile not found
        '500':
          description: Internal Server Error

  /citi_api/v1/restourant/update:
    put:
      summary: Update the Restourant profile
      tags:
        - Restourant
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the Restourant
                latitude:
                  type: number
                  description: Latitude of the Restourant location
                longitude:
                  type: number
                  description: Longitude of the Restourant location
                address:
                  type: string
                  description: The address of the Restourant
                images:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: Array of image files
                contactPerson:
                  type: string
                  description: Contact person for the Restourant
                email:
                  type: string
                  description: Contact email for the Restourant
              required:
                - name
                - latitude
                - longitude
                - address
                - contactPerson
                - email
      responses:
        '200':
          description: Restourant profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Restourant profile updated successfully
                  Restourant:
                    $ref: '#/components/schemas/Restourant'
        '400':
          description: Bad Request
        '404':
          description: Restourant profile not found
        '500':
          description: Internal Server Error

  /citi_api/v1/restourant/getby-id/{id}:
    get:
      summary: Get Restourant profile by ID
      tags:
        - Restourant
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The ID of the Restourant profile to get
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restourant'
        '404':
          description: Restourant profile not found
        '500':
          description: Internal Server Error

  /citi_api/v1/restourant/delete:
    delete:
      summary: Delete the Restourant profile
      tags:
        - Restourant
      responses:
        '200':
          description: Restourant profile deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Restourant profile deleted successfully
        '404':
          description: Restourant profile not found
        '500':
          description: Internal Server Error
  
  
  /partner/createPartner:
    post:
      summary: Create a new partner
      tags: 
        - Partner
      security:
        - bearerAuth: []
      description: Endpoint to create a new partner with support for image uploads.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Partner'
      responses:
        '201':
          description: Partner created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Partner'
  /partner/updatePartner/{id}:
    put:
      summary: Update an existing partner
      tags:
        - Partner
      security:
        - bearerAuth: []
      description: Endpoint to update an existing partner.
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the partner to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Partner'
      responses:
        '200':
          description: Partner updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Partner'
  /partner/deletePartner/{id}:
    delete:
      summary: Delete a partner by ID
      tags:
        - Partner
      security:
        - bearerAuth: []
      description: Endpoint to delete a partner by ID.
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the partner to delete
          schema:
            type: string
      responses:
        '200':
          description: Partner deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Partner deleted successfully
                  data:
                    type: null
  /partner/getAllPartners:
    get:
      summary: Get all partners
      tags:
        - Partner
      security:
        - bearerAuth: []
      description: Endpoint to retrieve all partners.
      responses:
        '200':
          description: Successfully retrieved all partners
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Partner'
  /partner/getPartnerById/{id}:
    get:
      summary: Get partner by ID
      tags:
        - Partner
      security:
        - bearerAuth: []
      description: Endpoint to retrieve a partner by ID.
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the partner to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved partner by ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Partner'
  /service/createService:
    post:
      summary: Create a new service
      tags: 
        - Service
      security:
        - bearerAuth: []
      description: Endpoint to create a new service.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Service'
      responses:
        '200':
          description: Service created successfully
  /service/readServices:
    get:
      summary: Get all services
      tags:
        - Service
      security:
        - bearerAuth: []
      description: Endpoint to retrieve all services.
      responses:
        '200':
          description: Successfully retrieved all services
          content:
            application/json:
              schema:
                // Define schema for array of services
  /service/readServices/{id}:
    get:
      summary: Get a service by ID
      tags:
        - Service
      security:
        - bearerAuth: []
      description: Endpoint to retrieve a service by ID.
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the service to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved service by ID
          content:
            application/json:
              schema:
                // Define schema for a single service
  /service/updateService/{id}:
    put:
      summary: Update a service by ID
      tags:
        - Service
      security:
        - bearerAuth: []
      description: Endpoint to update a service by ID.
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the service to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Service'
      responses:
        '200':
          description: Service updated successfully
  /service/deleteService/{id}:
    delete:
      summary: Delete a service by ID
      tags:
        - Service
      security:
        - bearerAuth: []
      description: Endpoint to delete a service by ID.
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the service to delete
          schema:
            type: string
      responses:
        '200':
          description: Service deleted successfully
  /contact/createContact:
    post:
      summary: Create a new contact
      tags: [contact]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  default: John Doe
                email:
                  type: string
                  default: johndoe@example.com
                subject:
                  type: string
                  default: Inquiry
                telephone:
                  type: string
                  default: "+1234567890"
                message:
                  type: string
                  default: Hello, I have a question.
      responses:
        '201':
          description: Contact created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Contact created successfully
                  data:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: 60fe5b6d2fba530015d48413
                      name:
                        type: string
                        example: John Doe
                      email:
                        type: string
                        example: johndoe@example.com
                      subject:
                        type: string
                        example: Inquiry
                      telephone:
                        type: string
                        example: "+1234567890"
                      message:
                        type: string
                        example: Hello, I have a question.
                      dateSent:
                        type: string
                        example: "2023-07-26T14:29:09.282Z"
  /contact/replaycontact/{id}:
    put:
      summary: Update an existing contact by ID
      tags: [contact]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the contact to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                
                replaysubbject:
                  type: string
                  example: subject
             
                replaymessage:
                  type: string
                  example: Hello, I have a question.
      responses:
        '200':
          description: Contact updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Contact updated successfully
                  data:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: 60fe5b6d2fba530015d48413
                      name:
                        type: string
                        example: John Doe
                      email:
                        type: string
                        example: johndoe@example.com
                      subject:
                        type: string
                        example: Inquiry
                      telephone:
                        type: string
                        example: "+1234567890"
                      message:
                        type: string
                        example: Hello, I have a question.
                      dateSent:
                        type: string
                        example: "2023-07-26T14:29:09.282Z"
  /contact/deleteContact/{id}:
    delete:
      summary: Delete an existing contact by ID
      tags: [contact]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the contact to delete
      responses:
        '200':
          description: Contact deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Contact deleted successfully
  /contact/getAllContacts:
    get:
      summary: Retrieve all contacts
      tags: [contact]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: All contacts retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: All contacts retrieved successfully
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                          example: 60fe5b6d2fba530015d48413
                        name:
                          type: string
                          example: John Doe
                        email:
                          type: string
                          example: johndoe@example.com
                        subject:
                          type: string
                          example: Inquiry
                        telephone:
                          type: string
                          example: "+1234567890"
                        message:
                          type: string
                          example: Hello, I have a question.
                        dateSent:
                          type: string
                          example: "2023-07-26T14:29:09.282Z"
  /contact/getContactById/{id}:
    get:
      summary: Retrieve a contact by ID
      tags: [contact]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the contact to retrieve
      responses:
        '200':
          description: Contact retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Contact retrieved successfully
                  data:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: 60fe5b6d2fba530015d48413
                      name:
                        type: string
                        example: John Doe
                      email:
                        type: string
                        example: johndoe@example.com
                      subject:
                        type: string
                        example: Inquiry
                      telephone:
                        type: string
                        example: "+1234567890"
                      message:
                        type: string
                        example: Hello, I have a question.
                      dateSent:
                        type: string
                        example: "2023-07-26T14:29:09.282Z"
  